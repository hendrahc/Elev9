init module {
	knowledge{
		% onRoute succeeds when Level is in the current direction Dir relative to the floor the agent is at.
		% Note that onRoute only succeeds when the elevator car is "docked", i.e. atFloor(Here) succeeds for
		% some floor (see also the belief section).
		%% 
		onRoute(Level, Dir) :- atFloor(Here), dir(Dir), Diff is Level-Here, (Diff<0 -> Dir=down; Dir=up).
		
		
		availableCap(CapLeft) :- capacity(C), people(N), CapLeft is C - N.
		
		% distance between the current elevator position and target position
		distance(Level, Dist) :- carPosition(CurrentPos), Dist is abs(Level-CurrentPos).
		
		
		% utility calculation
		myUtility(Level, Dir, Util) :- availableCap(C), C == 0, Util = 0. %elevator is full, Util=0
		myUtility(Level, Dir, Util) :- availableCap(C), capacity(TotalCap), atFloor(Level), dir(Dir), Util is 0.8+0.2*(C/TotalCap). % same floor, same direction
		
		myUtility(Level, Dir, Util)
			:- availableCap(C), capacity(TotalCap), floorCount(TotalFloor),
			distance(Level, Dist), dir(CurrentDir), CurrentDir == Dir,
			Util is (0.8*(1-Dist/TotalFloor)+0.2*(C/TotalCap)).
			
		myUtility(Level, Dir, Util) :- availableCap(C), C > 0, Util = 0. % last choice
		
		
	}
	beliefs{
		% The direction that will be shown to the people at the next stop.
		% This remains the intended direction of movement until there are no more
		% planned stops in that direction.
		dir(down).
		% Initially, it is unknown whether doors are open or closed.
		doorState(unknown).
		
		carPosition(0).
		people(0).
	}
	goals{
		atFloor(1), dir(up).
	}
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. It can
		% only be performed if the elevator car is docked and not moving, i.e.,
		% atFloor(Here) holds for some Here.
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		goto(Level, Dir) {
		   pre{ atFloor(Here), dir(DirNow), doorState(closed) }
		   post{ not(dir(DirNow)), dir(Dir) }
		}
	}
}
	
main module {
	program {
		% Goto the nearest floor that the agent wants to go to.
		%% There is no OtherLevel as goal that is nearer that target Level
		if a-goal( atFloor(Level), dir(Dir) ),
			bel( atFloor(Here), Distance is abs(Level-Here) ),
		    not(a-goal( atFloor(OtherLevel),
				OtherDistance is abs(OtherLevel-Here), OtherDistance<Distance) )
		then goto(Level, Dir).
	}
}
	
event module {
	program {
		
		
		%%%%% Get Environment Information %%%%%
		
		%% get number of floor information
		forall bel(percept(floorCount(N)))
			do insert(floorCount(N)).
		
		% get elevator capacity information 
		if bel( percept(capacity(C)))
			then insert(capacity(C)).
		
		
		
		% Initiate number of people inside elevator
		if bel(percept(people(N)), people(Nprev), Nprev \== N) then insert(people(N)) + delete(people(Nprev)).
		
		
		%%%%% Percept Processing %%%%%
		
		% The atFloor(Level) percept is received only when elevator has stopped at a floor Level.
		%% updating floor position
		forall bel( percept(atFloor(Level)), not(atFloor(Level)) )
			do insert( atFloor(Level) ).
%			+ send( manager, atFloor(Level) ).
			
		forall bel( atFloor(Level), not(percept(atFloor(Level))) )
			do delete( atFloor(Level) ).
%			+ manager.send(not(atFloor(Level)) ).
				
		% The fButton(Level,Dir) percept indicates that the up or down (Dir) button on floor Level has been pressed.
		%% updating Picking request
		forall bel( percept(fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir)) )
			do insert( fButtonOn(Level,Dir) ).
%			+ manager.send(fButtonOn(Level,Dir) ).
			
		forall bel( fButtonOn(Level,Dir), not(percept(fButtonOn(Level,Dir))) )
			do delete( fButtonOn(Level,Dir) ).
%			+ manager.send(not(fButtonOn(Level,Dir)) ).
		
		% The doorState percept is received only if the door state has changed.
		% So we do not need to check whether the New value is different from the Old value to avoid unnecessary updates.
		forall bel( percept(doorState(New)), doorState(Old) ) do insert( not(doorState(Old)), doorState(New) ).


		%% bidding request & response
%		forall bel( received(Sender, bidRequest(Level, Dir)), not(manager.sent(bid(Level, Dir, _))))
%			do {
%				if bel(myUtility(Level, Dir, Util))
%					then manager.send(bid(Level, Dir, Util)).
%			}


		%% receive task from the manager, and adopt these as goals
		forall bel(received(Sender,task(Level, Dir)))
			do delete(received(Sender,task(Level, Dir)))
			+ adopt(atFloor(Level), dir(Dir)).


		%%%%% Goal Management %%%%%

		% The elevator agent changes its plans only while it is docked, i.e., at a floor
		% and not moving.
		
		% Adopt new stops that are on this agent's route.
		%% 
		forall bel( fButtonOn(Level, Dir), onRoute(Level, Dir) ) do adopt( atFloor(Level), dir(Dir) ).
				
		% The eButton(Level) percept is received when the elevator button on floor Level has been pressed.
		% In that case, the agent will adopt a goal to service that floor. It is ASSUMED that a button for a floor is
		% pressed that is "on route", i.e. in the direction the elevator is currently travelling.
		%% insert Delivery request as goal
		forall bel( percept(eButtonOn(Level)), dir(Dir) ) do adopt( atFloor(Level), dir(Dir) ).

		% If there are no current goals to pursue, then adopt a goal to service an arbitrary floor for
		% which a floor button has been pressed that is not already being serviced.
		if bel( atFloor(Any) ), not(goal( atFloor(AnyL) )), bel( fButtonOn(L,D), doorState(closed) )
			then adopt( atFloor(L), dir(D) ).
	}
}
