init module {
	knowledge{
		
		% calculating number of elevators (counting the number of all agents except me, the manager)
		elevator(Elev) :- agent(Elev), not(me(Elev)).
		elevList(L) :- findall(Elev, elevator(Elev), L).
		num_elev(N) :- elevList(L), length(L,N).
		
		% for each level and dir, choose the sender with the highest utility
		% highest utility means there is no other agent with higher utility  
		highest_bid(Sender,Level,Dir,Util) :- received_bid(Sender, Level, Dir, Util), not(there_is_higher_bid(Sender,Level,Dir,Util) ).
		there_is_higher_bid(Sender,Level,Dir,Util) :- received_bid(Sender, Level, Dir, Util), received_bid(Other, Level, Dir, OtherUtil), Sender \= Other, OtherUtil > Util.
		
	}
	
	beliefs{
		
	}
	
	goals{

	}
	
	program {
		
    }
}
	
main module {
	program {
		
	}	
}
	
event module {
	program {
		
		% receive passenger picking request at floor Level, direction Dir (from elevator) 
		% create request to pick for auction
		% request(Level,Dir,N) means there are already N collected bids for request to floor Level with direction Dir
		forall bel(received(Sender, fButtonOn(Level,Dir) ), not(fButtonOn(Level,Dir)))
			do insert(fButtonOn(Level,Dir))
			+ insert(request(Level, Dir, 0))
			+ delete(received(Sender,fButtonOn(Level,Dir))).
		
		% whenever there is a picking request, send auction to all elevators
		forall bel(agent(A), not(me(A)), fButtonOn(Level,Dir), not(sent(A, auction(Level, Dir))))
			do (A).send( auction(Level, Dir)).

		% collecting bids from elevators for a request
		% whenever there is new bid, update the request
		forall bel(received(Sender,bid(Level, Dir, Util)), request(Level, Dir, LastN), num_elev(N), CurrentN is LastN+1, LastN < N)
			do insert( received_bid(Sender, Level, Dir, Util) )
			+ delete(request(Level, Dir, LastN))
			+ insert(request(Level, Dir, CurrentN))
			+ delete(sent(Sender, auction(Level, Dir))).
			
		
		% when all bids for request have been collected (number of bids = number of elevators),
		%  send the task to first elevator with the highest utility
		if bel(request(Level, Dir, N), num_elev(N), not(task_assign(Level, Dir, _)))
		then {
			if bel(highest_bid(Sender, Level, Dir, Util), not(task_assign(Level, Dir, _)))
			then (Sender).send( task(Level,Dir) ) 
				+ insert( task_assign(Level, Dir, Sender) ).
			
			% Clean-up after the task is assigned to an elevator
			forall bel(fButtonOn(Level, Dir)) do delete(fButtonOn(Level, Dir)).
			forall bel(request(Level, Dir, X)) do delete(request(Level, Dir, X)).
			forall bel(received_bid(Sender, Level, Dir, Util)) do delete(received_bid(Sender, Level, Dir, Util)).
		}
		
		% whenever an elevator has completed the task, delete the task assignment
		forall bel(received(Sender, task_complete(Level, Dir)), task_assign(Level, Dir, Sender))
			do delete(task_assign(Level, Dir, Sender))
			+ delete(sent(Sender, task(Level,Dir))). 
		
	}
}
